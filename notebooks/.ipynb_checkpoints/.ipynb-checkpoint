{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "imdbdata=pd.read_csv('../data/IMDB-Movie-Data.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Rank                    Title                     Genre  \\\n",
      "0     1  Guardians of the Galaxy   Action,Adventure,Sci-Fi   \n",
      "1     2               Prometheus  Adventure,Mystery,Sci-Fi   \n",
      "2     3                    Split           Horror,Thriller   \n",
      "\n",
      "                                         Description            Director  \\\n",
      "0  A group of intergalactic criminals are forced ...          James Gunn   \n",
      "1  Following clues to the origin of mankind, a te...        Ridley Scott   \n",
      "2  Three girls are kidnapped by a man with a diag...  M. Night Shyamalan   \n",
      "\n",
      "                                              Actors  Year  Runtime (Minutes)  \\\n",
      "0  Chris Pratt, Vin Diesel, Bradley Cooper, Zoe S...  2014                121   \n",
      "1  Noomi Rapace, Logan Marshall-Green, Michael Fa...  2012                124   \n",
      "2  James McAvoy, Anya Taylor-Joy, Haley Lu Richar...  2016                117   \n",
      "\n",
      "   Rating   Votes  Revenue (Millions)  Metascore  \n",
      "0     8.1  757074              333.13       76.0  \n",
      "1     7.0  485820              126.46       65.0  \n",
      "2     7.3  157606              138.12       62.0  \n"
     ]
    }
   ],
   "source": [
    "print(imdbdata.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 12 columns):\n",
      "Rank                  1000 non-null int64\n",
      "Title                 1000 non-null object\n",
      "Genre                 1000 non-null object\n",
      "Description           1000 non-null object\n",
      "Director              1000 non-null object\n",
      "Actors                1000 non-null object\n",
      "Year                  1000 non-null int64\n",
      "Runtime (Minutes)     1000 non-null int64\n",
      "Rating                1000 non-null float64\n",
      "Votes                 1000 non-null int64\n",
      "Revenue (Millions)    872 non-null float64\n",
      "Metascore             936 non-null float64\n",
      "dtypes: float64(3), int64(4), object(5)\n",
      "memory usage: 93.8+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(imdbdata.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    Guardians of the Galaxy\n",
      "1                 Prometheus\n",
      "2                      Split\n",
      "3                       Sing\n",
      "4              Suicide Squad\n",
      "Name: Title, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Select column 'Title'\n",
    "imdb_title = imdbdata.Title\n",
    "print(imdb_title.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    121\n",
      "1    124\n",
      "2    117\n",
      "3    108\n",
      "4    123\n",
      "Name: Runtime (Minutes), dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Select column 'Runtime (Minutes)'\n",
    "imdb_runtime_minutes = imdbdata['Runtime (Minutes)']\n",
    "print(imdb_runtime_minutes.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                     Title  Runtime (Minutes)\n",
      "0  Guardians of the Galaxy                121\n",
      "1               Prometheus                124\n",
      "2                    Split                117\n",
      "3                     Sing                108\n",
      "4            Suicide Squad                123\n"
     ]
    }
   ],
   "source": [
    "imdb_data = imdbdata[['Title', 'Runtime (Minutes)']]\n",
    "print(imdb_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Title                Sing\n",
      "Runtime (Minutes)     108\n",
      "Name: 3, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# select fourth row\n",
    "sing_movie = imdb_data.iloc[3]\n",
    "print(sing_movie)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      Title  Runtime (Minutes)\n",
      "997  Step Up 2: The Streets                 98\n",
      "998            Search Party                 93\n",
      "999              Nine Lives                 87\n"
     ]
    }
   ],
   "source": [
    "# select last third row\n",
    "last_three_movies = imdb_data.iloc[-3:]\n",
    "print(last_three_movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Title  Runtime (Minutes)\n",
      "42   Don't Fuck in the Woods                 73\n",
      "793      Ma vie de Courgette                 66\n",
      "819       Wolves at the Door                 73\n"
     ]
    }
   ],
   "source": [
    "# select rows with runtime less than 75\n",
    "short_movies = imdb_data[imdb_data['Runtime (Minutes)'] < 75]\n",
    "print(short_movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Title  Runtime (Minutes)\n",
      "42   Don't Fuck in the Woods                 73\n",
      "793      Ma vie de Courgette                 66\n",
      "819       Wolves at the Door                 73\n"
     ]
    }
   ],
   "source": [
    "# select rows with runtime between 60 and 80\n",
    "medium_length_movies = imdb_data[(imdb_data['Runtime (Minutes)'] > 60) &\n",
    "                                 (imdb_data['Runtime (Minutes)'] < 80)]\n",
    "print(medium_length_movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Title  Runtime (Minutes)\n",
      "0    Guardians of the Galaxy                121\n",
      "819       Wolves at the Door                 73\n"
     ]
    }
   ],
   "source": [
    "# select rows with title in the list\n",
    "fav_movies = imdb_data[imdb_data.Title.isin([\n",
    "    'Wolves at the Door', 'Guardians of the Galaxy'\n",
    "])]\n",
    "print(fav_movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                     Title  Runtime (Minutes)\n",
      "0  Guardians of the Galaxy                121\n",
      "1       Wolves at the Door                 73\n",
      "                     Title  Runtime (Minutes)\n",
      "0  Don't Fuck in the Woods                 73\n",
      "1      Ma vie de Courgette                 66\n",
      "2       Wolves at the Door                 73\n"
     ]
    }
   ],
   "source": [
    "# reset indices without changing the source DF\n",
    "fav_movies = fav_movies.reset_index(drop=True)\n",
    "print(fav_movies)\n",
    "\n",
    "# reset indices in the source DF\n",
    "medium_length_movies.reset_index(drop=True, inplace=True)\n",
    "print(medium_length_movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
